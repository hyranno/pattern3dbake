import type { Component } from 'solid-js';

import styles from './App.module.css';

import PlainModel from 'PlainModel';
import NoisedModel from 'NoisedModel';
import TiledAdd from 'TiledAdd';
import Triplanar from 'Triplanar';

const App: Component = () => {

  return (
    <div class={styles.App}>
      <h3>ランタイムにおけるProceduralTextureの活用について</h3>
      <h4>前説</h4>
      <p>
        ゲーム等のグラフィックにおいて、テクスチャは結構なデータサイズを持つ。
        これはストレージを圧迫するのも問題だし、ダウンロードにも時間がかかる。
        テクスチャには質感を表現するためにノイズを乗せることがあるが、
        ノイズは一般に圧縮が効きにくく、データサイズ肥大の一因になる。
        一方ノイズなどのProceduralなランタイムでの生成が可能な要素は、
        ノイズを乗せるタイミングをある程度選ぶことが出来る。
      </p>
      <li>
        <ul> <h5>オフライン</h5>
          Blenderアドオンなどであらかじめ用意する方法。
          複雑なノイズでもランタイムの計算量を消費しない。
          ストレージ上のサイズが膨らむ。
          ストレージからメモリへの転送資源と、それに伴う時間を食う。
        </ul>
        <ul> <h5>ロード時</h5>
          テクスチャをロードする際(またはそれ以降)に書き込む方法。
          ノイズ付加前のテクスチャで表示しておいてから、計算後にノイズ付加後のテクスチャに差し替えられる。
          ストレージ上のサイズが小さい。
          ロード時に計算資源と、それに伴う時間を食う。
        </ul>
        <ul> <h5>レンダリング時</h5>
          テクスチャに書き込まず、フラグメントシェーダで直接計算する方法。
          ストレージ上のサイズ、メモリ上のサイズが小さい。
          レンダリング時に計算資源と、それに伴う時間を食う。
          ただしテクスチャのフェッチは減る。
          ミップマップが無いのでモアレ等のエイリアシングへの対策が別途必要。
        </ul>
      </li>
      <p>
        本稿ではロード時のノイズ生成について扱う。
      </p>

      <h4>3次元パターンのテクスチャへの書き込み</h4>
      <p>
        描画位置がUVに依存するようにvertexシェーダを、
        色は3Dモデル上の座標に依存するようにfragmentシェーダを書けばいい。
      </p>
        /*
          TODO コード
        */
      例えばこんな感じになる。上が元のモデル、下がシャツ部分にノイズを乗せたモデル。
      <div>
        <PlainModel />
      </div>
      <div>
        <NoisedModel />
      </div>
      <p>
        3次元パターンを元にしているのでUVの切れ目でも模様が連続する。
        UVの切れ目に線が入ってしまってるのは対処する必要があるけど。
      </p>

      <h4>テクスチャをタイル状に繰り返す</h4>
      <p>
        質感表現のためのノイズを全部テクスチャに描こうとすると、解像度が厳しいことがある。
        その場合は、同じテクスチャをタイル状に繰り返して使うことが考えられる。
        3Dパターンを直接計算する方法と比べればできることは限られるし、
        タイルの境界がボケたり不連続になったりするものの、計算コストは下げられる。
        正方形を並べただけだと繰り返し感が強く出てしまうが、
        タイル形状を六角形に変更したり、ランダムに回転させたりすると軽減できる。
      </p>
      <div>
        <TiledAdd />
      </div>

      <h4>Triplanar Mapping による投影</h4>
      <p>
        UV空間でノイズを重ねる意外にも、
        テクスチャをメッシュにxyzそれぞれの方向から投影する方法があり、
        これはTriplanar Mappingと呼ばれている。
        UV展開が不要で、人間にも分かりやすい。
        ただしレンダリング時にテクスチャ参照が複数回発生するのであまり高速ではないし、
        面の角度によっては引き延ばされて歪んだり、ボケたり不連続になったりする。
      </p>
      <div>
        <Triplanar />
      </div>

      <h4>おわり</h4>
      <p>
        ロード時やレンダリング時に計算できるものはそちらに移すと
        ストレージサイズが減らせて嬉しいので検討しましょう。
      </p>
    </div>
  );
};

export default App;
