生成に必要な情報量に対して生成されるデータサイズが大きい要素
  noise, self-occlusion, etc...
  いつテクスチャに乗せるべきか?
  1.オフライン
    Blenderアドオンなどであらかじめ用意する方法
    複雑なノイズでもランタイムの計算量を消費しない
    ストレージ上のサイズが膨らむ
    ストレージからメモリへの転送資源と、それに伴う時間を食う
  2.ランタイム(ロード時)
    テクスチャをロードする際(またはそれ以降)に書き込む方法
    ストレージ上のサイズが小さい
    ロード時に計算資源と、それに伴う時間を食う
  3.レンダリング時
    テクスチャに書き込まず、フラグメントシェーダで直接計算する方法
    ストレージ上のサイズ、メモリ上のサイズが小さい
    レンダリング時に計算資源と、それに伴う時間を食う
2を主なターゲットとする

Procedural Texture
  3次元空間上のパターンをテクスチャに書き込む
  ロード時に計算負荷
Triplanar Mapping
  テクスチャから転写する
  レンダリング時にやや負荷
    テクスチャ参照が複数回(3)発生する
    座標変換、blend
  同じテクスチャを参照して使いまわせる
  blendしてる部分がボケたり、面の角度によって品質が下がる
  大量に置く岩など
    個別のテクスチャをメモリに持たせるほど重要ではない
    レンダリング時計算では重すぎる
  解像度を維持するためにテクスチャを繰り返し配置する
    hex-tiling等を用いると気付かれにくい

TypeScript + BabylonJS (+ SolidJS)


TODO s
  fractionalBrownianMotion
  TriplanarMapping

canvasがアルファ値を保存してないのでは
  textureに直にレンダリングする必要がある?


simplex
  https://en.wikipedia.org/wiki/Simplex_noise
  skewed cube を Simplicial subdivision で分割

triplanar mapping
  Inigoのbiplanarも参照
voronoi-based hex-tiling
  uv座標に対する操作と考えてよさそう
  triplanar mappingにも適用可能


vite-plugin-glsl でシェーダを管理する
  https://github.com/UstymUkhman/vite-plugin-glsl
生成する要素
  サルベージする
    https://github.com/hyranno/raymarch_webgl/tree/master/src/tsgl_raymarch
  fBM
  voronoi(fill, edge)
  GradientNoise(Perlin, Simplex, OpenSimplex)

canvas_diffuse, canvas_bump, ...
canvas_view
  material.diffuseTexture, .bumpTexture, ... に DynamicTexture 割り当て

メッシュをvertexシェーダでUVに展開
  頂点のUV情報に従う(メッシュを実行時生成する場合、UVも生成する)
faceをテクスチャ(color, bump, etc...)に描画していく
  描画位置はUVに依存
  色は3Dモデル上の座標に依存
  法線も欲しい
material.diffuseTexture, .bumpTexture に texture 割り当て
  canvas経由のDynamicTextureじゃないとengine用canvasのサイズに制限される?

canvasでなくテクスチャに描画する?
  camera.customRenderTarget
  camera.renderTargetTexture
前段のテクスチャを参照はしない
  加算・乗算など
  パスが増えるのも嫌だし、シェーダ1つで全部済ませてくれ
元のテクスチャの上から描画(不使用)
  mesh_copy.renderingGroupId = 0
  mesh_noise.renderingGroupId = 1


gltfつかう?
  https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF
  shader指定ができない
vrmつかう?
  https://qiita.com/il-m-yamagishi/items/9bc6a8738a4de755c13f
  https://doc.babylonjs.com/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_VRM
  人型のモデルのみになる
  babylon-vrm-loader
    babylon 5 系には対応してないっぽい

babylonJSは左手系(+zが奥方向)
scene間でmeshの共有は難しそう
